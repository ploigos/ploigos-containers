name: publish

on:
  schedule:
  - cron: '0 10 * * *' # everyday at 10am
  push:
    branches:
    - main
    tags:
    - 'v*.*.*'
  pull_request:

env:
  GITHUB_EVENT_REPOSITORY_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
  GITHUB_EVENT_NUMBER: ${{ github.event.number }}
  REGISTRY_URI: ${{ secrets.REGISTRY_URI }}
  REGISTRY_REPOSITORY: ${{ secrets.REGISTRY_REPOSITORY }}

jobs:
  cancel-previous:
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.5.0
        with:
          access_token: ${{ github.token }}

## UBI8 ##

  #####################
  # ploigos-base_ubi8 #
  #####################
  ploigos-base_ubi8:
    needs:
    - cancel-previous

    runs-on: ubuntu-latest

    env:
      IMAGE_CONTEXT: ./ploigos-base
      IMAGE_FILE: Containerfile.ubi8
      IMAGE_NAME: ploigos-base
      IMAGE_TAG_LOCAL: localhost:5000/${{ secrets.REGISTRY_REPOSITORY }}/ploigos-base:latest.ubi8
      IMAGE_TAG_FLAVOR: .ubi8
      IMAGE_IS_DEFAULT_FLAVOR: true

    services:
      registry:
        image: registry:2
        ports:
        - 5000:5000

    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v2

      - name: Determine Image Version and Tags ‚öôÔ∏è
        id: prep
        run: ${GITHUB_WORKSPACE}/.github/scripts/determine-image-version.sh

      - name: Version üìå
        run: echo ${{ steps.prep.outputs.version }}

      - name: Image Tags üè∑
        run: echo ${{ steps.prep.outputs.tags }}

      - name: Set up QEMU üß∞
        uses: docker/setup-qemu-action@v1.0.1

      - name: Set up Docker Buildx üß∞
        uses: docker/setup-buildx-action@v1.0.4
        with:
          driver-opts: network=host

      - name: Cache Docker layers üóÉ
        uses: actions/cache@v2.1.3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Image üõ†
        id: image_build
        uses: docker/build-push-action@v2.2.1
        env:
          IMAGE_BUILD_ARGS:
        with:
          context: ${{ env.IMAGE_CONTEXT }}
          file: ${{ env.IMAGE_CONTEXT }}/${{ env.IMAGE_FILE }}
          build-args: ${{ env.IMAGE_BUILD_ARGS }}
          push: true
          tags: ${{ env.IMAGE_TAG_LOCAL }}
          labels: |
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Test Image üß™
        run: |
          echo "Test python3 installed"
          docker run ${{ env.IMAGE_TAG_LOCAL }} python3 --version
          echo "Test pip3 installed"
          docker run ${{ env.IMAGE_TAG_LOCAL }} pip3 --version
          echo "Test ploigos-step-runner is installed"
          docker run ${{ env.IMAGE_TAG_LOCAL }} pip show ploigos-step-runner
          echo "Test psr CLI works"
          docker run ${{ env.IMAGE_TAG_LOCAL }} psr --help
          echo "Test oc installed"
          docker run ${{ env.IMAGE_TAG_LOCAL }} oc version
          echo "Test git installed"
          docker run ${{ env.IMAGE_TAG_LOCAL }} git version
          echo "Test yq installed"
          docker run ${{ env.IMAGE_TAG_LOCAL }} yq --version

      - name: Login to External Registry üîë
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URI }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Push to External Registry üî∫
        id: push
        run: |
          docker pull ${{ env.IMAGE_TAG_LOCAL }}

          TAGS=${{ steps.prep.outputs.tags }}
          for TAG in ${TAGS//,/ }; do
            docker tag ${{ env.IMAGE_TAG_LOCAL }} ${TAG}
            docker push ${TAG}
          done

      - name: Image Digest üîñ
        run: echo ${{ steps.image_build.outputs.digest }}

  #############################
  # ploigos-base-java-8_ubi8  #
  #############################
  ploigos-base-java-8_ubi8 :
    needs:
    - ploigos-base_ubi8

    runs-on: ubuntu-latest

    env:
      IMAGE_CONTEXT: ./ploigos-base-java-8
      IMAGE_FILE: Containerfile.ubi8
      IMAGE_NAME: ploigos-base-java-8
      IMAGE_TAG_LOCAL: localhost:5000/${{ secrets.REGISTRY_REPOSITORY }}/ploigos-base-java-8:latest.ubi8
      BASE_IMAGE_NAME: ploigos-base
      IMAGE_TAG_FLAVOR: .ubi8
      IMAGE_IS_DEFAULT_FLAVOR: true

    services:
      registry:
        image: registry:2
        ports:
        - 5000:5000

    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v2

      - name: Determine Image Version and Tags ‚öôÔ∏è
        id: prep
        run: ${GITHUB_WORKSPACE}/.github/scripts/determine-image-version.sh

      - name: Version üìå
        run: echo ${{ steps.prep.outputs.version }}

      - name: Image Tags üè∑
        run: echo ${{ steps.prep.outputs.tags }}

      - name: Set up QEMU üß∞
        uses: docker/setup-qemu-action@v1.0.1

      - name: Set up Docker Buildx üß∞
        uses: docker/setup-buildx-action@v1.0.4
        with:
          driver-opts: network=host

      - name: Cache Docker layers üóÉ
        uses: actions/cache@v2.1.3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Image üõ†
        id: image_build
        uses: docker/build-push-action@v2.2.1
        env:
          IMAGE_BUILD_ARGS: BASE_IMAGE=${{ secrets.REGISTRY_URI }}/${{ secrets.REGISTRY_REPOSITORY }}/${{ env.BASE_IMAGE_NAME }}:${{ steps.prep.outputs.version }}
        with:
          context: ${{ env.IMAGE_CONTEXT }}
          file: ${{ env.IMAGE_CONTEXT }}/${{ env.IMAGE_FILE }}
          build-args: ${{ env.IMAGE_BUILD_ARGS }}
          push: true
          tags: ${{ env.IMAGE_TAG_LOCAL }}
          labels: |
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Test Image üß™
        run: |
          echo "Running: docker run ${{ env.IMAGE_TAG_LOCAL }} java -version"
          docker run -u 1001 ${{ env.IMAGE_TAG_LOCAL }} java -version

      - name: Login to External Registry üîë
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URI }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Push to External Registry üî∫
        id: push
        run: |
          docker pull ${{ env.IMAGE_TAG_LOCAL }}

          TAGS=${{ steps.prep.outputs.tags }}
          for TAG in ${TAGS//,/ }; do
            docker tag ${{ env.IMAGE_TAG_LOCAL }} ${TAG}
            docker push ${TAG}
          done

      - name: Image Digest üîñ
        run: echo ${{ steps.image_build.outputs.digest }}

  ##################################
  # ploigos-ci-agent-jenkins_ubi8  #
  ##################################
  ploigos-ci-agent-jenkins_ubi8:
    needs:
    - ploigos-base-java-8_ubi8

    runs-on: ubuntu-latest

    env:
      IMAGE_CONTEXT: ./ploigos-ci-agent-jenkins
      IMAGE_FILE: Containerfile.ubi8
      IMAGE_NAME: ploigos-ci-agent-jenkins
      IMAGE_TAG_LOCAL: localhost:5000/${{ secrets.REGISTRY_REPOSITORY }}/ploigos-ci-agent-jenkins:latest.ubi8
      BASE_IMAGE_NAME: ploigos-base-java-8
      IMAGE_TAG_FLAVOR: .ubi8
      IMAGE_IS_DEFAULT_FLAVOR: true

    services:
      registry:
        image: registry:2
        ports:
        - 5000:5000

    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v2

      - name: Determine Image Version and Tags ‚öôÔ∏è
        id: prep
        run: ${GITHUB_WORKSPACE}/.github/scripts/determine-image-version.sh

      - name: Version üìå
        run: echo ${{ steps.prep.outputs.version }}

      - name: Image Tags üè∑
        run: echo ${{ steps.prep.outputs.tags }}

      - name: Set up QEMU üß∞
        uses: docker/setup-qemu-action@v1.0.1

      - name: Set up Docker Buildx üß∞
        uses: docker/setup-buildx-action@v1.0.4
        with:
          driver-opts: network=host

      - name: Cache Docker layers üóÉ
        uses: actions/cache@v2.1.3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Image üõ†
        id: image_build
        uses: docker/build-push-action@v2.2.1
        env:
          IMAGE_BUILD_ARGS: BASE_IMAGE=${{ secrets.REGISTRY_URI }}/${{ secrets.REGISTRY_REPOSITORY }}/${{ env.BASE_IMAGE_NAME }}:${{ steps.prep.outputs.version }}
        with:
          context: ${{ env.IMAGE_CONTEXT }}
          file: ${{ env.IMAGE_CONTEXT }}/${{ env.IMAGE_FILE }}
          build-args: ${{ env.IMAGE_BUILD_ARGS }}
          push: true
          tags: ${{ env.IMAGE_TAG_LOCAL }}
          labels: |
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Test Image üß™
        run: |
          echo "Running: docker run --entrypoint=which ${{ env.IMAGE_TAG_LOCAL }} run-jnlp-client"
          docker run --entrypoint=which ${{ env.IMAGE_TAG_LOCAL }} run-jnlp-client

      - name: Login to External Registry üîë
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URI }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Push to External Registry üî∫
        id: push
        run: |
          docker pull ${{ env.IMAGE_TAG_LOCAL }}

          TAGS=${{ steps.prep.outputs.tags }}
          for TAG in ${TAGS//,/ }; do
            docker tag ${{ env.IMAGE_TAG_LOCAL }} ${TAG}
            docker push ${TAG}
          done

      - name: Image Digest üîñ
        run: echo ${{ steps.image_build.outputs.digest }}

  #########################
  # ploigos-jenkins-init  #
  #########################
  ploigos-jenkins-init:
    needs:
    - cancel-previous

    runs-on: ubuntu-latest

    env:
      IMAGE_CONTEXT: ./ploigos-jenkins-init
      IMAGE_FILE: Containerfile
      IMAGE_NAME: ploigos-jenkins-init
      IMAGE_TAG_LOCAL: localhost:5000/${{ secrets.REGISTRY_REPOSITORY }}/ploigos-jenkins-init:latest
      IMAGE_IS_DEFAULT_FLAVOR: true

    services:
      registry:
        image: registry:2
        ports:
        - 5000:5000

    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v2

      - name: Determine Image Version and Tags ‚öôÔ∏è
        id: prep
        run: ${GITHUB_WORKSPACE}/.github/scripts/determine-image-version.sh

      - name: Version üìå
        run: echo ${{ steps.prep.outputs.version }}

      - name: Image Tags üè∑
        run: echo ${{ steps.prep.outputs.tags }}

      - name: Set up QEMU üß∞
        uses: docker/setup-qemu-action@v1.0.1

      - name: Set up Docker Buildx üß∞
        uses: docker/setup-buildx-action@v1.0.4
        with:
          driver-opts: network=host

      - name: Cache Docker layers üóÉ
        uses: actions/cache@v2.1.3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Image üõ†
        id: image_build
        uses: docker/build-push-action@v2.2.1
        with:
          context: ${{ env.IMAGE_CONTEXT }}
          file: ${{ env.IMAGE_CONTEXT }}/${{ env.IMAGE_FILE }}
          push: true
          tags: ${{ env.IMAGE_TAG_LOCAL }}
          labels: |
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Test Image üß™
        run: |
          echo "Running: docker run --entrypoint=ls ${{ env.IMAGE_TAG_LOCAL }} ploigos-jenkins-plugins/ansicolor.jpi ploigos-jenkins-plugins/openshift-client.jpi"
          docker run --entrypoint=ls ${{ env.IMAGE_TAG_LOCAL }} ploigos-jenkins-plugins/ansicolor.jpi ploigos-jenkins-plugins/openshift-client.jpi

      - name: Login to External Registry üîë
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URI }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Push to External Registry üî∫
        id: push
        run: |
          docker pull ${{ env.IMAGE_TAG_LOCAL }}

          TAGS=${{ steps.prep.outputs.tags }}
          for TAG in ${TAGS//,/ }; do
            docker tag ${{ env.IMAGE_TAG_LOCAL }} ${TAG}
            docker push ${TAG}
          done

      - name: Image Digest üîñ
        run: echo ${{ steps.image_build.outputs.digest }}

  ############################
  # ploigos-tool-argocd_ubi8 #
  ############################
  ploigos-tool-argocd_ubi8:
    needs:
    - ploigos-base_ubi8

    runs-on: ubuntu-latest

    env:
      IMAGE_CONTEXT: ./ploigos-tool-argocd
      IMAGE_FILE: Containerfile.ubi8
      IMAGE_NAME: ploigos-tool-argocd
      IMAGE_TAG_LOCAL: localhost:5000/${{ secrets.REGISTRY_REPOSITORY }}/ploigos-tool-argocd:latest.ubi8
      IMAGE_TAG_FLAVOR: .ubi8
      IMAGE_IS_DEFAULT_FLAVOR: true
      BASE_IMAGE_NAME: ploigos-base

    services:
      registry:
        image: registry:2
        ports:
        - 5000:5000

    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v2

      - name: Determine Image Version and Tags ‚öôÔ∏è
        id: prep
        run: ${GITHUB_WORKSPACE}/.github/scripts/determine-image-version.sh

      - name: Version üìå
        run: echo ${{ steps.prep.outputs.version }}

      - name: Image Tags üè∑
        run: echo ${{ steps.prep.outputs.tags }}

      - name: Set up QEMU üß∞
        uses: docker/setup-qemu-action@v1.0.1

      - name: Set up Docker Buildx üß∞
        uses: docker/setup-buildx-action@v1.0.4
        with:
          driver-opts: network=host

      - name: Cache Docker layers üóÉ
        uses: actions/cache@v2.1.3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Image üõ†
        id: image_build
        uses: docker/build-push-action@v2.2.1
        env:
          IMAGE_BUILD_ARGS: BASE_IMAGE=${{ secrets.REGISTRY_URI }}/${{ secrets.REGISTRY_REPOSITORY }}/${{ env.BASE_IMAGE_NAME }}:${{ steps.prep.outputs.version }}
        with:
          context: ${{ env.IMAGE_CONTEXT }}
          file: ${{ env.IMAGE_CONTEXT }}/${{ env.IMAGE_FILE }}
          build-args: ${{ env.IMAGE_BUILD_ARGS }}
          push: true
          tags: ${{ env.IMAGE_TAG_LOCAL }}
          labels: |
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Test Image üß™
        run: |
          echo "Verify ArgoCD installed"
          docker run ${{ env.IMAGE_TAG_LOCAL }} argocd version --client

      - name: Login to External Registry üîë
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URI }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Push to External Registry üî∫
        id: push
        run: |
          docker pull ${{ env.IMAGE_TAG_LOCAL }}

          TAGS=${{ steps.prep.outputs.tags }}
          for TAG in ${TAGS//,/ }; do
            docker tag ${{ env.IMAGE_TAG_LOCAL }} ${TAG}
            docker push ${TAG}
          done

      - name: Image Digest üîñ
        run: echo ${{ steps.image_build.outputs.digest }}

  #################################
  # ploigos-tool-config-lint_ubi8 #
  #################################
  ploigos-tool-config-lint_ubi8:
    needs:
    - ploigos-base_ubi8

    runs-on: ubuntu-latest

    env:
      IMAGE_CONTEXT: ./ploigos-tool-config-lint
      IMAGE_FILE: Containerfile.ubi8
      IMAGE_NAME: ploigos-tool-config-lint
      IMAGE_TAG_LOCAL: localhost:5000/${{ secrets.REGISTRY_REPOSITORY }}/ploigos-tool-config-lint:latest.ubi8
      IMAGE_TAG_FLAVOR: .ubi8
      IMAGE_IS_DEFAULT_FLAVOR: true
      BASE_IMAGE_NAME: ploigos-base

    services:
      registry:
        image: registry:2
        ports:
        - 5000:5000

    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v2

      - name: Determine Image Version and Tags ‚öôÔ∏è
        id: prep
        run: ${GITHUB_WORKSPACE}/.github/scripts/determine-image-version.sh

      - name: Version üìå
        run: echo ${{ steps.prep.outputs.version }}

      - name: Image Tags üè∑
        run: echo ${{ steps.prep.outputs.tags }}

      - name: Set up QEMU üß∞
        uses: docker/setup-qemu-action@v1.0.1

      - name: Set up Docker Buildx üß∞
        uses: docker/setup-buildx-action@v1.0.4
        with:
          driver-opts: network=host

      - name: Cache Docker layers üóÉ
        uses: actions/cache@v2.1.3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Image üõ†
        id: image_build
        uses: docker/build-push-action@v2.2.1
        env:
          IMAGE_BUILD_ARGS: BASE_IMAGE=${{ secrets.REGISTRY_URI }}/${{ secrets.REGISTRY_REPOSITORY }}/${{ env.BASE_IMAGE_NAME }}:${{ steps.prep.outputs.version }}
        with:
          context: ${{ env.IMAGE_CONTEXT }}
          file: ${{ env.IMAGE_CONTEXT }}/${{ env.IMAGE_FILE }}
          build-args: ${{ env.IMAGE_BUILD_ARGS }}
          push: true
          tags: ${{ env.IMAGE_TAG_LOCAL }}
          labels: |
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Test Image üß™
        run: |
          echo "Running: docker run ${{ env.IMAGE_TAG_LOCAL }} config-lint --version"
          docker run -u 1001 ${{ env.IMAGE_TAG_LOCAL }} config-lint --version

      - name: Login to External Registry üîë
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URI }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Push to External Registry üî∫
        id: push
        run: |
          docker pull ${{ env.IMAGE_TAG_LOCAL }}

          TAGS=${{ steps.prep.outputs.tags }}
          for TAG in ${TAGS//,/ }; do
            docker tag ${{ env.IMAGE_TAG_LOCAL }} ${TAG}
            docker push ${TAG}
          done

      - name: Image Digest üîñ
        run: echo ${{ steps.image_build.outputs.digest }}

  ##########################
  # ploigos-tool-helm_ubi8 #
  ##########################
  ploigos-tool-helm_ubi8:
    needs:
    - ploigos-base_ubi8

    runs-on: ubuntu-latest

    env:
      IMAGE_CONTEXT: ./ploigos-tool-helm
      IMAGE_FILE: Containerfile.ubi8
      IMAGE_NAME: ploigos-tool-helm
      IMAGE_TAG_LOCAL: localhost:5000/${{ secrets.REGISTRY_REPOSITORY }}/ploigos-tool-helm:latest.ubi8
      IMAGE_TAG_FLAVOR: .ubi8
      IMAGE_IS_DEFAULT_FLAVOR: true
      BASE_IMAGE_NAME: ploigos-base

    services:
      registry:
        image: registry:2
        ports:
        - 5000:5000

    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v2

      - name: Determine Image Version and Tags ‚öôÔ∏è
        id: prep
        run: ${GITHUB_WORKSPACE}/.github/scripts/determine-image-version.sh

      - name: Version üìå
        run: echo ${{ steps.prep.outputs.version }}

      - name: Image Tags üè∑
        run: echo ${{ steps.prep.outputs.tags }}

      - name: Set up QEMU üß∞
        uses: docker/setup-qemu-action@v1.0.1

      - name: Set up Docker Buildx üß∞
        uses: docker/setup-buildx-action@v1.0.4
        with:
          driver-opts: network=host

      - name: Cache Docker layers üóÉ
        uses: actions/cache@v2.1.3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Image üõ†
        id: image_build
        uses: docker/build-push-action@v2.2.1
        env:
          IMAGE_BUILD_ARGS: BASE_IMAGE=${{ secrets.REGISTRY_URI }}/${{ secrets.REGISTRY_REPOSITORY }}/${{ env.BASE_IMAGE_NAME }}:${{ steps.prep.outputs.version }}
        with:
          context: ${{ env.IMAGE_CONTEXT }}
          file: ${{ env.IMAGE_CONTEXT }}/${{ env.IMAGE_FILE }}
          build-args: ${{ env.IMAGE_BUILD_ARGS }}
          push: true
          tags: ${{ env.IMAGE_TAG_LOCAL }}
          labels: |
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Test Image üß™
        run: |
          echo "Check helm is entry point"
          docker run -u 1001 ${{ env.IMAGE_TAG_LOCAL }} helm --help

          echo "Check helm version (this value needs to be updated if default value in container is updated)"
          docker run -u 1001 ${{ env.IMAGE_TAG_LOCAL }} helm version

          echo "Check helm-secrets plugin is installed in expected location"
          docker run -u 1001 ${{ env.IMAGE_TAG_LOCAL }} ls /helm/plugins/helm-secrets

          echo "Check that helm-secrets plugin is installed"
          docker run -u 1001 ${{ env.IMAGE_TAG_LOCAL }} helm secrets --help

          echo "Check that helm-secrets plugin is installed when running as random user"
          docker run -u 10010042 ${{ env.IMAGE_TAG_LOCAL }} helm secrets --help

          echo "Check that sops is installed"
          docker run -u 1001 ${{ env.IMAGE_TAG_LOCAL }} sops --version

      - name: Login to External Registry üîë
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URI }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Push to External Registry üî∫
        id: push
        run: |
          docker pull ${{ env.IMAGE_TAG_LOCAL }}

          TAGS=${{ steps.prep.outputs.tags }}
          for TAG in ${TAGS//,/ }; do
            docker tag ${{ env.IMAGE_TAG_LOCAL }} ${TAG}
            docker push ${TAG}
          done

      - name: Image Digest üîñ
        run: echo ${{ steps.image_build.outputs.digest }}

  ###########################
  # ploigos-tool-maven_ubi8 #
  ###########################
  ploigos-tool-maven_ubi8:
    needs:
    - ploigos-base-java-8_ubi8

    runs-on: ubuntu-latest

    env:
      IMAGE_CONTEXT: ./ploigos-tool-maven
      IMAGE_FILE: Containerfile.ubi8
      IMAGE_NAME: ploigos-tool-maven
      IMAGE_TAG_LOCAL: localhost:5000/${{ secrets.REGISTRY_REPOSITORY }}/ploigos-tool-maven:latest.ubi8
      IMAGE_TAG_FLAVOR: .ubi8
      IMAGE_IS_DEFAULT_FLAVOR: true
      BASE_IMAGE_NAME: ploigos-base-java-8

    services:
      registry:
        image: registry:2
        ports:
        - 5000:5000

    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v2

      - name: Determine Image Version and Tags ‚öôÔ∏è
        id: prep
        run: ${GITHUB_WORKSPACE}/.github/scripts/determine-image-version.sh

      - name: Version üìå
        run: echo ${{ steps.prep.outputs.version }}

      - name: Image Tags üè∑
        run: echo ${{ steps.prep.outputs.tags }}

      - name: Set up QEMU üß∞
        uses: docker/setup-qemu-action@v1.0.1

      - name: Set up Docker Buildx üß∞
        uses: docker/setup-buildx-action@v1.0.4
        with:
          driver-opts: network=host

      - name: Cache Docker layers üóÉ
        uses: actions/cache@v2.1.3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Image üõ†
        id: image_build
        uses: docker/build-push-action@v2.2.1
        env:
          IMAGE_BUILD_ARGS: BASE_IMAGE=${{ secrets.REGISTRY_URI }}/${{ secrets.REGISTRY_REPOSITORY }}/${{ env.BASE_IMAGE_NAME }}:${{ steps.prep.outputs.version }}
        with:
          context: ${{ env.IMAGE_CONTEXT }}
          file: ${{ env.IMAGE_CONTEXT }}/${{ env.IMAGE_FILE }}
          build-args: ${{ env.IMAGE_BUILD_ARGS }}
          push: true
          tags: ${{ env.IMAGE_TAG_LOCAL }}
          labels: |
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Test Image üß™
        run: |
          echo "Verify java installed"
          docker run -u 1001 ${{ env.IMAGE_TAG_LOCAL }} java -version

          echo "Verify maven installed"
          docker run -u 1001  ${{ env.IMAGE_TAG_LOCAL }} mvn --version

          echo "Verify can create file in ~/.m2"
          docker run -u 1001 ${{ env.IMAGE_TAG_LOCAL }} /bin/bash -c "mkdir -p ~/.m2; touch ~/.m2/test-settings.xml"

      - name: Login to External Registry üîë
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URI }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Push to External Registry üî∫
        id: push
        run: |
          docker pull ${{ env.IMAGE_TAG_LOCAL }}

          TAGS=${{ steps.prep.outputs.tags }}
          for TAG in ${TAGS//,/ }; do
            docker tag ${{ env.IMAGE_TAG_LOCAL }} ${TAG}
            docker push ${TAG}
          done

      - name: Image Digest üîñ
        run: echo ${{ steps.image_build.outputs.digest }}

  ###########################
  # ploigos-tool-sonar_ubi8 #
  ###########################
  ploigos-tool-sonar_ubi8:
    needs:
    - ploigos-base_ubi8

    runs-on: ubuntu-latest

    env:
      IMAGE_CONTEXT: ./ploigos-tool-sonar
      IMAGE_FILE: Containerfile.ubi8
      IMAGE_NAME: ploigos-tool-sonar
      IMAGE_TAG_LOCAL: localhost:5000/${{ secrets.REGISTRY_REPOSITORY }}/ploigos-tool-sonar:latest.ubi8
      IMAGE_TAG_FLAVOR: .ubi8
      IMAGE_IS_DEFAULT_FLAVOR: true
      BASE_IMAGE_NAME: ploigos-base

    services:
      registry:
        image: registry:2
        ports:
        - 5000:5000

    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v2

      - name: Determine Image Version and Tags ‚öôÔ∏è
        id: prep
        run: ${GITHUB_WORKSPACE}/.github/scripts/determine-image-version.sh

      - name: Version üìå
        run: echo ${{ steps.prep.outputs.version }}

      - name: Image Tags üè∑
        run: echo ${{ steps.prep.outputs.tags }}

      - name: Set up QEMU üß∞
        uses: docker/setup-qemu-action@v1.0.1

      - name: Set up Docker Buildx üß∞
        uses: docker/setup-buildx-action@v1.0.4
        with:
          driver-opts: network=host

      - name: Cache Docker layers üóÉ
        uses: actions/cache@v2.1.3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Image üõ†
        id: image_build
        uses: docker/build-push-action@v2.2.1
        env:
          IMAGE_BUILD_ARGS: BASE_IMAGE=${{ secrets.REGISTRY_URI }}/${{ secrets.REGISTRY_REPOSITORY }}/${{ env.BASE_IMAGE_NAME }}:${{ steps.prep.outputs.version }}
        with:
          context: ${{ env.IMAGE_CONTEXT }}
          file: ${{ env.IMAGE_CONTEXT }}/${{ env.IMAGE_FILE }}
          build-args: ${{ env.IMAGE_BUILD_ARGS }}
          push: true
          tags: ${{ env.IMAGE_TAG_LOCAL }}
          labels: |
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Test Image üß™
        run: |
          echo "Running: docker run ${{ env.IMAGE_TAG_LOCAL }} sonar-scanner --version"
          docker run -u 1001 ${{ env.IMAGE_TAG_LOCAL }} sonar-scanner --version

      - name: Login to External Registry üîë
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URI }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Push to External Registry üî∫
        id: push
        run: |
          docker pull ${{ env.IMAGE_TAG_LOCAL }}

          TAGS=${{ steps.prep.outputs.tags }}
          for TAG in ${TAGS//,/ }; do
            docker tag ${{ env.IMAGE_TAG_LOCAL }} ${TAG}
            docker push ${TAG}
          done

      - name: Image Digest üîñ
        run: echo ${{ steps.image_build.outputs.digest }}

  ###################
  # ploigos-jenkins #
  ###################
  ploigos-jenkins:
    needs:
    - cancel-previous

    runs-on: ubuntu-latest

    env:
      IMAGE_CONTEXT: ./ploigos-jenkins
      IMAGE_FILE: Containerfile
      IMAGE_NAME: ploigos-jenkins
      IMAGE_TAG_LOCAL: localhost:5000/${{ secrets.REGISTRY_REPOSITORY }}/ploigos-jenkins:latest
      IMAGE_IS_DEFAULT_FLAVOR: true

    services:
      registry:
        image: registry:2
        ports:
        - 5000:5000

    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v2

      - name: Determine Image Version and Tags ‚öôÔ∏è
        id: prep
        run: ${GITHUB_WORKSPACE}/.github/scripts/determine-image-version.sh

      - name: Version üìå
        run: echo ${{ steps.prep.outputs.version }}

      - name: Image Tags üè∑
        run: echo ${{ steps.prep.outputs.tags }}

      - name: Set up QEMU üß∞
        uses: docker/setup-qemu-action@v1.0.1

      - name: Set up Docker Buildx üß∞
        uses: docker/setup-buildx-action@v1.0.4
        with:
          driver-opts: network=host

      - name: Cache Docker layers üóÉ
        uses: actions/cache@v2.1.3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Image üõ†
        id: image_build
        uses: docker/build-push-action@v2.2.1
        env:
          IMAGE_BUILD_ARGS:
        with:
          context: ${{ env.IMAGE_CONTEXT }}
          file: ${{ env.IMAGE_CONTEXT }}/${{ env.IMAGE_FILE }}
          build-args: ${{ env.IMAGE_BUILD_ARGS }}
          push: true
          tags: ${{ env.IMAGE_TAG_LOCAL }}
          labels: |
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Test Image üß™
        run: |
          echo "Running: docker run --entrypoint=ls ${{ env.IMAGE_TAG_LOCAL }} /usr/lib/jenkins/jenkins.war"
          docker run --entrypoint=ls ${{ env.IMAGE_TAG_LOCAL }} /usr/lib/jenkins/jenkins.war

      - name: Login to External Registry üîë
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URI }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Push to External Registry üî∫
        id: push
        run: |
          docker pull ${{ env.IMAGE_TAG_LOCAL }}

          TAGS=${{ steps.prep.outputs.tags }}
          for TAG in ${TAGS//,/ }; do
            docker tag ${{ env.IMAGE_TAG_LOCAL }} ${TAG}
            docker push ${TAG}
          done

      - name: Image Digest üîñ
        run: echo ${{ steps.image_build.outputs.digest }}

  ###########################
  # ploigos-tool-rekor_ubi8 #
  ###########################
  ploigos-tool-rekor_ubi8:
    needs:
    - ploigos-base_ubi8

    runs-on: ubuntu-latest

    env:
      IMAGE_CONTEXT: ./ploigos-tool-rekor
      IMAGE_FILE: Containerfile.ubi8
      IMAGE_NAME: ploigos-tool-rekor
      IMAGE_TAG_LOCAL: localhost:5000/${{ secrets.REGISTRY_REPOSITORY }}/ploigos-tool-rekor:latest.ubi8
      IMAGE_TAG_FLAVOR: .ubi8
      IMAGE_IS_DEFAULT_FLAVOR: true
      BASE_IMAGE_NAME: ploigos-base

    services:
      registry:
        image: registry:2
        ports:
        - 5000:5000

    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v2

      - name: Determine Image Version and Tags ‚öôÔ∏è
        id: prep
        run: ${GITHUB_WORKSPACE}/.github/scripts/determine-image-version.sh

      - name: Version üìå
        run: echo ${{ steps.prep.outputs.version }}

      - name: Image Tags üè∑
        run: echo ${{ steps.prep.outputs.tags }}

      - name: Set up QEMU üß∞
        uses: docker/setup-qemu-action@v1.0.1

      - name: Set up Docker Buildx üß∞
        uses: docker/setup-buildx-action@v1.0.4
        with:
          driver-opts: network=host

      - name: Cache Docker layers üóÉ
        uses: actions/cache@v2.1.3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Image üõ†
        id: image_build
        uses: docker/build-push-action@v2.2.1
        env:
          IMAGE_BUILD_ARGS: BASE_IMAGE=${{ secrets.REGISTRY_URI }}/${{ secrets.REGISTRY_REPOSITORY }}/${{ env.BASE_IMAGE_NAME }}:${{ steps.prep.outputs.version }}
        with:
          context: ${{ env.IMAGE_CONTEXT }}
          file: ${{ env.IMAGE_CONTEXT }}/${{ env.IMAGE_FILE }}
          build-args: ${{ env.IMAGE_BUILD_ARGS }}
          push: true
          tags: ${{ env.IMAGE_TAG_LOCAL }}
          labels: |
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Test Image üß™
        run: |
          echo "Check rekor binary exists"
          docker run -u 1001 --entrypoint='' ${{ env.IMAGE_TAG_LOCAL }} /bin/sh -c "rekor --help"

      - name: Login to External Registry üîë
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URI }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Push to External Registry üî∫
        id: push
        run: |
          docker pull ${{ env.IMAGE_TAG_LOCAL }}

          TAGS=${{ steps.prep.outputs.tags }}
          for TAG in ${TAGS//,/ }; do
            docker tag ${{ env.IMAGE_TAG_LOCAL }} ${TAG}
            docker push ${TAG}
          done

      - name: Image Digest üîñ
        run: echo ${{ steps.image_build.outputs.digest }}

  ################################
  # ploigos-tool-containers_ubi8 #
  ################################
  ploigos-tool-containers_ubi8:
    needs:
    - ploigos-base_ubi8

    runs-on: ubuntu-latest

    env:
      IMAGE_CONTEXT: ./ploigos-tool-containers
      IMAGE_FILE: Containerfile.ubi8
      IMAGE_NAME: ploigos-tool-containers
      IMAGE_TAG_LOCAL: localhost:5000/${{ secrets.REGISTRY_REPOSITORY }}/ploigos-tool-containers:latest.ubi8
      IMAGE_TAG_FLAVOR: .ubi8
      IMAGE_IS_DEFAULT_FLAVOR: true
      BASE_IMAGE_NAME: ploigos-base

    services:
      registry:
        image: registry:2
        ports:
        - 5000:5000

    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v2

      - name: Determine Image Version and Tags ‚öôÔ∏è
        id: prep
        run: ${GITHUB_WORKSPACE}/.github/scripts/determine-image-version.sh

      - name: Version üìå
        run: echo ${{ steps.prep.outputs.version }}

      - name: Image Tags üè∑
        run: echo ${{ steps.prep.outputs.tags }}

      - name: Set up QEMU üß∞
        uses: docker/setup-qemu-action@v1.0.1

      - name: Set up Docker Buildx üß∞
        uses: docker/setup-buildx-action@v1.0.4
        with:
          driver-opts: network=host

      - name: Cache Docker layers üóÉ
        uses: actions/cache@v2.1.3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Image üõ†
        id: image_build
        uses: docker/build-push-action@v2.2.1
        env:
          IMAGE_BUILD_ARGS: BASE_IMAGE=${{ secrets.REGISTRY_URI }}/${{ secrets.REGISTRY_REPOSITORY }}/${{ env.BASE_IMAGE_NAME }}:${{ steps.prep.outputs.version }}
        with:
          context: ${{ env.IMAGE_CONTEXT }}
          file: ${{ env.IMAGE_CONTEXT }}/${{ env.IMAGE_FILE }}
          build-args: ${{ env.IMAGE_BUILD_ARGS }}
          push: true
          tags: ${{ env.IMAGE_TAG_LOCAL }}
          labels: |
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Test Image üß™
        run: |
          echo "test skopeo"
          docker run -u 1001 ${{ env.IMAGE_TAG_LOCAL }} skopeo --version

          echo "test podman"
          docker run -u 1001 ${{ env.IMAGE_TAG_LOCAL }} podman --version

          echo "test buildah"
          docker run -u 1001 ${{ env.IMAGE_TAG_LOCAL }} buildah --version

      - name: Login to External Registry üîë
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URI }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Push to External Registry üî∫
        id: push
        run: |
          docker pull ${{ env.IMAGE_TAG_LOCAL }}

          TAGS=${{ steps.prep.outputs.tags }}
          for TAG in ${TAGS//,/ }; do
            docker tag ${{ env.IMAGE_TAG_LOCAL }} ${TAG}
            docker push ${TAG}
          done

      - name: Image Digest üîñ
        run: echo ${{ steps.image_build.outputs.digest }}

  ################################
  # ploigos-tool-openscap_ubi8#
  ################################
  ploigos-tool-openscap_ubi8:
    needs:
    - ploigos-tool-containers_ubi8

    runs-on: ubuntu-latest

    env:
      IMAGE_CONTEXT: ./ploigos-tool-openscap
      IMAGE_FILE: Containerfile.ubi8
      IMAGE_NAME: ploigos-tool-openscap
      IMAGE_TAG_LOCAL: localhost:5000/${{ secrets.REGISTRY_REPOSITORY }}/ploigos-tool-openscap:latest.ubi8
      IMAGE_TAG_FLAVOR: .ubi8
      IMAGE_IS_DEFAULT_FLAVOR: true
      BASE_IMAGE_NAME: ploigos-tool-containers

    services:
      registry:
        image: registry:2
        ports:
        - 5000:5000

    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v2

      - name: Determine Image Version and Tags ‚öôÔ∏è
        id: prep
        run: ${GITHUB_WORKSPACE}/.github/scripts/determine-image-version.sh

      - name: Version üìå
        run: echo ${{ steps.prep.outputs.version }}

      - name: Image Tags üè∑
        run: echo ${{ steps.prep.outputs.tags }}

      - name: Set up QEMU üß∞
        uses: docker/setup-qemu-action@v1.0.1

      - name: Set up Docker Buildx üß∞
        uses: docker/setup-buildx-action@v1.0.4
        with:
          driver-opts: network=host

      - name: Cache Docker layers üóÉ
        uses: actions/cache@v2.1.3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Image üõ†
        id: image_build
        uses: docker/build-push-action@v2.2.1
        env:
          IMAGE_BUILD_ARGS: BASE_IMAGE=${{ secrets.REGISTRY_URI }}/${{ secrets.REGISTRY_REPOSITORY }}/${{ env.BASE_IMAGE_NAME }}:${{ steps.prep.outputs.version }}
        with:
          context: ${{ env.IMAGE_CONTEXT }}
          file: ${{ env.IMAGE_CONTEXT }}/${{ env.IMAGE_FILE }}
          build-args: ${{ env.IMAGE_BUILD_ARGS }}
          push: true
          tags: ${{ env.IMAGE_TAG_LOCAL }}
          labels: |
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Test Image üß™
        run: |
          echo "test oscap"
          docker run -u 1001 ${{ env.IMAGE_TAG_LOCAL }} oscap --version

      - name: Login to External Registry üîë
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URI }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Push to External Registry üî∫
        id: push
        run: |
          docker pull ${{ env.IMAGE_TAG_LOCAL }}

          TAGS=${{ steps.prep.outputs.tags }}
          for TAG in ${TAGS//,/ }; do
            docker tag ${{ env.IMAGE_TAG_LOCAL }} ${TAG}
            docker push ${TAG}
          done

      - name: Image Digest üîñ
        run: echo ${{ steps.image_build.outputs.digest }}
