name: publish

on:
  schedule:
  - cron: '0 10 * * *' # everyday at 10am
  push:
    branches:
    - main
    tags:
    - 'v*.*.*'
  pull_request:

jobs:
  cancel-previous:
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.5.0
        with:
          access_token: ${{ github.token }}

  ################
  # ploigos-base #
  ################
  ploigos-base:
    needs:
    - cancel-previous

    runs-on: ubuntu-latest

    env:
      IMAGE_CONTEXT: ./ploigos-base
      IMAGE_FILE: Containerfile
      IMAGE_NAME: ploigos-base
      IMAGE_TAG_LOCAL: localhost:5000/${{ secrets.REGISTRY_REPOSITORY }}/ploigos-base:latest

    services:
      registry:
        image: registry:2
        ports:
        - 5000:5000

    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v2

      - name: Determine Image Version and Tags ‚öôÔ∏è
        id: prep
        run: |
          IMAGE_REPOSITORY=${{ secrets.REGISTRY_URI }}/${{ secrets.REGISTRY_REPOSITORY }}/${{ env.IMAGE_NAME }}

          VERSION=noop
          if [ "${{ github.event_name }}" = "schedule" ]; then
            VERSION=nightly
          elif [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
            if [ "${{ github.event.repository.default_branch }}" = "$VERSION" ]; then
              VERSION=edge
            fi
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION=pr-${{ github.event.number }}
          fi
          TAGS="${IMAGE_REPOSITORY}:${VERSION}"
          if [[ $VERSION =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            MINOR=${VERSION%.*}
            MAJOR=${MINOR%.*}
            TAGS="$TAGS,${IMAGE_REPOSITORY}:${MINOR},${IMAGE_REPOSITORY}:${MAJOR},${IMAGE_REPOSITORY}:latest"
          elif [ "${{ github.event_name }}" = "push" ]; then
            TAGS="$TAGS,${IMAGE_REPOSITORY}:sha-${GITHUB_SHA::8}"
          fi

          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')

      - name: Version üìå
        run: echo ${{ steps.prep.outputs.version }}

      - name: Image Tags üè∑
        run: echo ${{ steps.prep.outputs.tags }}

      - name: Set up QEMU üß∞
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx üß∞
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: network=host

      - name: Cache Docker layers üóÉ
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Image üõ†
        id: image_build
        uses: docker/build-push-action@v2
        env:
          IMAGE_BUILD_ARGS:
        with:
          context: ${{ env.IMAGE_CONTEXT }}
          file: ${{ env.IMAGE_CONTEXT }}/${{ env.IMAGE_FILE }}
          build-args: ${{ env.IMAGE_BUILD_ARGS }}
          push: true
          tags: ${{ env.IMAGE_TAG_LOCAL }}
          labels: |
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Test Image üß™
        run: |
          echo "Running: docker run ${{ env.IMAGE_TAG_LOCAL }} python3 --version"
          docker run ${{ env.IMAGE_TAG_LOCAL }} python3 --version
          echo "Running: docker run ${{ env.IMAGE_TAG_LOCAL }} pip3 --version"
          docker run ${{ env.IMAGE_TAG_LOCAL }} pip3 --version
          echo "Running: docker run ${{ env.IMAGE_TAG_LOCAL }} oc version"
          docker run ${{ env.IMAGE_TAG_LOCAL }} oc version
          echo "Running: docker run ${{ env.IMAGE_TAG_LOCAL }} git version"
          docker run ${{ env.IMAGE_TAG_LOCAL }} git version

      - name: Login to External Registry üîë
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URI }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Push to External Registry üî∫
        id: push
        run: |
          docker pull ${{ env.IMAGE_TAG_LOCAL }}

          TAGS=${{ steps.prep.outputs.tags }}
          for TAG in ${TAGS//,/ }; do
            docker tag ${{ env.IMAGE_TAG_LOCAL }} ${TAG}
            docker push ${TAG}
          done

      - name: Image Digest üîñ
        run: echo ${{ steps.image_build.outputs.digest }}

  #######################
  # ploigos-base-java-8 #
  #######################
  ploigos-base-java-8:
    needs:
    - ploigos-base

    runs-on: ubuntu-latest

    env:
      IMAGE_CONTEXT: ./ploigos-base-java-8
      IMAGE_FILE: Containerfile
      IMAGE_NAME: ploigos-base-java-8
      IMAGE_TAG_LOCAL: localhost:5000/${{ secrets.REGISTRY_REPOSITORY }}/ploigos-base-java-8:latest
      FROM_IMAGE_NAME: ploigos-base

    services:
      registry:
        image: registry:2
        ports:
        - 5000:5000

    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v2

      - name: Determine Image Version and Tags ‚öôÔ∏è
        id: prep
        run: |
          IMAGE_REPOSITORY=${{ secrets.REGISTRY_URI }}/${{ secrets.REGISTRY_REPOSITORY }}/${{ env.IMAGE_NAME }}

          VERSION=noop
          if [ "${{ github.event_name }}" = "schedule" ]; then
            VERSION=nightly
          elif [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
            if [ "${{ github.event.repository.default_branch }}" = "$VERSION" ]; then
              VERSION=edge
            fi
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION=pr-${{ github.event.number }}
          fi
          TAGS="${IMAGE_REPOSITORY}:${VERSION}"
          if [[ $VERSION =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            MINOR=${VERSION%.*}
            MAJOR=${MINOR%.*}
            TAGS="$TAGS,${IMAGE_REPOSITORY}:${MINOR},${IMAGE_REPOSITORY}:${MAJOR},${IMAGE_REPOSITORY}:latest"
          elif [ "${{ github.event_name }}" = "push" ]; then
            TAGS="$TAGS,${IMAGE_REPOSITORY}:sha-${GITHUB_SHA::8}"
          fi

          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')

      - name: Version üìå
        run: echo ${{ steps.prep.outputs.version }}

      - name: Image Tags üè∑
        run: echo ${{ steps.prep.outputs.tags }}

      - name: Set up QEMU üß∞
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx üß∞
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: network=host

      - name: Cache Docker layers üóÉ
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Image üõ†
        id: image_build
        uses: docker/build-push-action@v2
        env:
          IMAGE_BUILD_ARGS: FROM_IMAGE=${{ secrets.REGISTRY_URI }}/${{ secrets.REGISTRY_REPOSITORY }}/${{ env.FROM_IMAGE_NAME }}:${{ steps.prep.outputs.version }}
        with:
          context: ${{ env.IMAGE_CONTEXT }}
          file: ${{ env.IMAGE_CONTEXT }}/${{ env.IMAGE_FILE }}
          build-args: ${{ env.IMAGE_BUILD_ARGS }}
          push: true
          tags: ${{ env.IMAGE_TAG_LOCAL }}
          labels: |
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Test Image üß™
        run: |
          echo "Running: docker run ${{ env.IMAGE_TAG_LOCAL }} java -version"
          docker run -u 1001 ${{ env.IMAGE_TAG_LOCAL }} java -version

      - name: Login to External Registry üîë
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URI }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Push to External Registry üî∫
        id: push
        run: |
          docker pull ${{ env.IMAGE_TAG_LOCAL }}

          TAGS=${{ steps.prep.outputs.tags }}
          for TAG in ${TAGS//,/ }; do
            docker tag ${{ env.IMAGE_TAG_LOCAL }} ${TAG}
            docker push ${TAG}
          done

      - name: Image Digest üîñ
        run: echo ${{ steps.image_build.outputs.digest }}

  ############################
  # ploigos-ci-agent-jenkins #
  ############################
  ploigos-ci-agent-jenkins:
    needs:
    - ploigos-base-java-8

    runs-on: ubuntu-latest

    env:
      IMAGE_CONTEXT: ./ploigos-ci-agent-jenkins
      IMAGE_FILE: Containerfile
      IMAGE_NAME: ploigos-ci-agent-jenkins
      IMAGE_TAG_LOCAL: localhost:5000/${{ secrets.REGISTRY_REPOSITORY }}/ploigos-ci-agent-jenkins:latest
      FROM_IMAGE_NAME: ploigos-base-java-8

    services:
      registry:
        image: registry:2
        ports:
        - 5000:5000

    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v2

      - name: Determine Image Version and Tags ‚öôÔ∏è
        id: prep
        run: |
          IMAGE_REPOSITORY=${{ secrets.REGISTRY_URI }}/${{ secrets.REGISTRY_REPOSITORY }}/${{ env.IMAGE_NAME }}

          VERSION=noop
          if [ "${{ github.event_name }}" = "schedule" ]; then
            VERSION=nightly
          elif [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
            if [ "${{ github.event.repository.default_branch }}" = "$VERSION" ]; then
              VERSION=edge
            fi
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION=pr-${{ github.event.number }}
          fi
          TAGS="${IMAGE_REPOSITORY}:${VERSION}"
          if [[ $VERSION =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            MINOR=${VERSION%.*}
            MAJOR=${MINOR%.*}
            TAGS="$TAGS,${IMAGE_REPOSITORY}:${MINOR},${IMAGE_REPOSITORY}:${MAJOR},${IMAGE_REPOSITORY}:latest"
          elif [ "${{ github.event_name }}" = "push" ]; then
            TAGS="$TAGS,${IMAGE_REPOSITORY}:sha-${GITHUB_SHA::8}"
          fi

          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')

      - name: Version üìå
        run: echo ${{ steps.prep.outputs.version }}

      - name: Image Tags üè∑
        run: echo ${{ steps.prep.outputs.tags }}

      - name: Set up QEMU üß∞
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx üß∞
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: network=host

      - name: Cache Docker layers üóÉ
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Image üõ†
        id: image_build
        uses: docker/build-push-action@v2
        env:
          IMAGE_BUILD_ARGS: FROM_IMAGE=${{ secrets.REGISTRY_URI }}/${{ secrets.REGISTRY_REPOSITORY }}/${{ env.FROM_IMAGE_NAME }}:${{ steps.prep.outputs.version }}
        with:
          context: ${{ env.IMAGE_CONTEXT }}
          file: ${{ env.IMAGE_CONTEXT }}/${{ env.IMAGE_FILE }}
          build-args: ${{ env.IMAGE_BUILD_ARGS }}
          push: true
          tags: ${{ env.IMAGE_TAG_LOCAL }}
          labels: |
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Test Image üß™
        run: |
          echo "Running: docker run --entrypoint=which ${{ env.IMAGE_TAG_LOCAL }} run-jnlp-client"
          docker run --entrypoint=which ${{ env.IMAGE_TAG_LOCAL }} run-jnlp-client

      - name: Login to External Registry üîë
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URI }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Push to External Registry üî∫
        id: push
        run: |
          docker pull ${{ env.IMAGE_TAG_LOCAL }}

          TAGS=${{ steps.prep.outputs.tags }}
          for TAG in ${TAGS//,/ }; do
            docker tag ${{ env.IMAGE_TAG_LOCAL }} ${TAG}
            docker push ${TAG}
          done

      - name: Image Digest üîñ
        run: echo ${{ steps.image_build.outputs.digest }}

  #######################
  # ploigos-tool-argocd #
  #######################
  ploigos-tool-argocd:
    needs:
    - ploigos-base

    runs-on: ubuntu-latest

    env:
      IMAGE_CONTEXT: ./ploigos-tool-argocd
      IMAGE_FILE: Containerfile
      IMAGE_NAME: ploigos-tool-argocd
      IMAGE_TAG_LOCAL: localhost:5000/${{ secrets.REGISTRY_REPOSITORY }}/ploigos-tool-argocd:latest
      FROM_IMAGE_NAME: ploigos-base

    services:
      registry:
        image: registry:2
        ports:
        - 5000:5000

    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v2

      - name: Determine Image Version and Tags ‚öôÔ∏è
        id: prep
        run: |
          IMAGE_REPOSITORY=${{ secrets.REGISTRY_URI }}/${{ secrets.REGISTRY_REPOSITORY }}/${{ env.IMAGE_NAME }}

          VERSION=noop
          if [ "${{ github.event_name }}" = "schedule" ]; then
            VERSION=nightly
          elif [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
            if [ "${{ github.event.repository.default_branch }}" = "$VERSION" ]; then
              VERSION=edge
            fi
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION=pr-${{ github.event.number }}
          fi
          TAGS="${IMAGE_REPOSITORY}:${VERSION}"
          if [[ $VERSION =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            MINOR=${VERSION%.*}
            MAJOR=${MINOR%.*}
            TAGS="$TAGS,${IMAGE_REPOSITORY}:${MINOR},${IMAGE_REPOSITORY}:${MAJOR},${IMAGE_REPOSITORY}:latest"
          elif [ "${{ github.event_name }}" = "push" ]; then
            TAGS="$TAGS,${IMAGE_REPOSITORY}:sha-${GITHUB_SHA::8}"
          fi

          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')

      - name: Version üìå
        run: echo ${{ steps.prep.outputs.version }}

      - name: Image Tags üè∑
        run: echo ${{ steps.prep.outputs.tags }}

      - name: Set up QEMU üß∞
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx üß∞
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: network=host

      - name: Cache Docker layers üóÉ
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Image üõ†
        id: image_build
        uses: docker/build-push-action@v2
        env:
          IMAGE_BUILD_ARGS: FROM_IMAGE=${{ secrets.REGISTRY_URI }}/${{ secrets.REGISTRY_REPOSITORY }}/${{ env.FROM_IMAGE_NAME }}:${{ steps.prep.outputs.version }}
        with:
          context: ${{ env.IMAGE_CONTEXT }}
          file: ${{ env.IMAGE_CONTEXT }}/${{ env.IMAGE_FILE }}
          build-args: ${{ env.IMAGE_BUILD_ARGS }}
          push: true
          tags: ${{ env.IMAGE_TAG_LOCAL }}
          labels: |
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Test Image üß™
        run: |
          echo "Running: docker run ${{ env.IMAGE_TAG_LOCAL }} version --client"
          docker run ${{ env.IMAGE_TAG_LOCAL }} version --client

      - name: Login to External Registry üîë
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URI }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Push to External Registry üî∫
        id: push
        run: |
          docker pull ${{ env.IMAGE_TAG_LOCAL }}

          TAGS=${{ steps.prep.outputs.tags }}
          for TAG in ${TAGS//,/ }; do
            docker tag ${{ env.IMAGE_TAG_LOCAL }} ${TAG}
            docker push ${TAG}
          done

      - name: Image Digest üîñ
        run: echo ${{ steps.image_build.outputs.digest }}

  ############################
  # ploigos-tool-config-lint #
  ############################
  ploigos-tool-config-lint:
    needs:
    - ploigos-base

    runs-on: ubuntu-latest

    env:
      IMAGE_CONTEXT: ./ploigos-tool-config-lint
      IMAGE_FILE: Containerfile
      IMAGE_NAME: ploigos-tool-config-lint
      IMAGE_TAG_LOCAL: localhost:5000/${{ secrets.REGISTRY_REPOSITORY }}/ploigos-tool-config-lint:latest
      FROM_IMAGE_NAME: ploigos-base

    services:
      registry:
        image: registry:2
        ports:
        - 5000:5000

    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v2

      - name: Determine Image Version and Tags ‚öôÔ∏è
        id: prep
        run: |
          IMAGE_REPOSITORY=${{ secrets.REGISTRY_URI }}/${{ secrets.REGISTRY_REPOSITORY }}/${{ env.IMAGE_NAME }}

          VERSION=noop
          if [ "${{ github.event_name }}" = "schedule" ]; then
            VERSION=nightly
          elif [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
            if [ "${{ github.event.repository.default_branch }}" = "$VERSION" ]; then
              VERSION=edge
            fi
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION=pr-${{ github.event.number }}
          fi
          TAGS="${IMAGE_REPOSITORY}:${VERSION}"
          if [[ $VERSION =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            MINOR=${VERSION%.*}
            MAJOR=${MINOR%.*}
            TAGS="$TAGS,${IMAGE_REPOSITORY}:${MINOR},${IMAGE_REPOSITORY}:${MAJOR},${IMAGE_REPOSITORY}:latest"
          elif [ "${{ github.event_name }}" = "push" ]; then
            TAGS="$TAGS,${IMAGE_REPOSITORY}:sha-${GITHUB_SHA::8}"
          fi

          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')

      - name: Version üìå
        run: echo ${{ steps.prep.outputs.version }}

      - name: Image Tags üè∑
        run: echo ${{ steps.prep.outputs.tags }}

      - name: Set up QEMU üß∞
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx üß∞
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: network=host

      - name: Cache Docker layers üóÉ
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Image üõ†
        id: image_build
        uses: docker/build-push-action@v2
        env:
          IMAGE_BUILD_ARGS: FROM_IMAGE=${{ secrets.REGISTRY_URI }}/${{ secrets.REGISTRY_REPOSITORY }}/${{ env.FROM_IMAGE_NAME }}:${{ steps.prep.outputs.version }}
        with:
          context: ${{ env.IMAGE_CONTEXT }}
          file: ${{ env.IMAGE_CONTEXT }}/${{ env.IMAGE_FILE }}
          build-args: ${{ env.IMAGE_BUILD_ARGS }}
          push: true
          tags: ${{ env.IMAGE_TAG_LOCAL }}
          labels: |
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Test Image üß™
        run: |
          echo "Running: docker run ${{ env.IMAGE_TAG_LOCAL }} config-lint --version"
          docker run -u 1001 ${{ env.IMAGE_TAG_LOCAL }} config-lint --version

      - name: Login to External Registry üîë
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URI }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Push to External Registry üî∫
        id: push
        run: |
          docker pull ${{ env.IMAGE_TAG_LOCAL }}

          TAGS=${{ steps.prep.outputs.tags }}
          for TAG in ${TAGS//,/ }; do
            docker tag ${{ env.IMAGE_TAG_LOCAL }} ${TAG}
            docker push ${TAG}
          done

      - name: Image Digest üîñ
        run: echo ${{ steps.image_build.outputs.digest }}

  #####################
  # ploigos-tool-helm #
  #####################
  ploigos-tool-helm:
    needs:
    - ploigos-base

    runs-on: ubuntu-latest

    env:
      IMAGE_CONTEXT: ./ploigos-tool-helm
      IMAGE_FILE: Containerfile
      IMAGE_NAME: ploigos-tool-helm
      IMAGE_TAG_LOCAL: localhost:5000/${{ secrets.REGISTRY_REPOSITORY }}/ploigos-tool-helm:latest
      FROM_IMAGE_NAME: ploigos-base

    services:
      registry:
        image: registry:2
        ports:
        - 5000:5000

    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v2

      - name: Determine Image Version and Tags ‚öôÔ∏è
        id: prep
        run: |
          IMAGE_REPOSITORY=${{ secrets.REGISTRY_URI }}/${{ secrets.REGISTRY_REPOSITORY }}/${{ env.IMAGE_NAME }}

          VERSION=noop
          if [ "${{ github.event_name }}" = "schedule" ]; then
            VERSION=nightly
          elif [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
            if [ "${{ github.event.repository.default_branch }}" = "$VERSION" ]; then
              VERSION=edge
            fi
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION=pr-${{ github.event.number }}
          fi
          TAGS="${IMAGE_REPOSITORY}:${VERSION}"
          if [[ $VERSION =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            MINOR=${VERSION%.*}
            MAJOR=${MINOR%.*}
            TAGS="$TAGS,${IMAGE_REPOSITORY}:${MINOR},${IMAGE_REPOSITORY}:${MAJOR},${IMAGE_REPOSITORY}:latest"
          elif [ "${{ github.event_name }}" = "push" ]; then
            TAGS="$TAGS,${IMAGE_REPOSITORY}:sha-${GITHUB_SHA::8}"
          fi

          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')

      - name: Version üìå
        run: echo ${{ steps.prep.outputs.version }}

      - name: Image Tags üè∑
        run: echo ${{ steps.prep.outputs.tags }}

      - name: Set up QEMU üß∞
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx üß∞
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: network=host

      - name: Cache Docker layers üóÉ
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Image üõ†
        id: image_build
        uses: docker/build-push-action@v2
        env:
          IMAGE_BUILD_ARGS: FROM_IMAGE=${{ secrets.REGISTRY_URI }}/${{ secrets.REGISTRY_REPOSITORY }}/${{ env.FROM_IMAGE_NAME }}:${{ steps.prep.outputs.version }}
        with:
          context: ${{ env.IMAGE_CONTEXT }}
          file: ${{ env.IMAGE_CONTEXT }}/${{ env.IMAGE_FILE }}
          build-args: ${{ env.IMAGE_BUILD_ARGS }}
          push: true
          tags: ${{ env.IMAGE_TAG_LOCAL }}
          labels: |
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Test Image üß™
        run: |
          echo "Check helm is entry point"
          docker run -u 1001 ${{ env.IMAGE_TAG_LOCAL }} --help

          echo "Check helm version (this value needs to be updated if default value in container is updated)"
          docker run -u 1001 ${{ env.IMAGE_TAG_LOCAL }} version

          echo "Check helm-secrets plugin is installed in expected location"
          docker run -u 1001 --entrypoint='' ${{ env.IMAGE_TAG_LOCAL }} /bin/sh -c "ls /helm/plugins/helm-secrets"

          echo "Check that helm-secrets plugin is installed"
          docker run -u 1001 ${{ env.IMAGE_TAG_LOCAL }} secrets --help

          echo "Check that helm-secrets plugin is installed when running as random user"
          docker run -u 10010042 ${{ env.IMAGE_TAG_LOCAL }} secrets --help

          echo "Check that sops is installed"
          docker run -u 1001 --entrypoint='' ${{ env.IMAGE_TAG_LOCAL }} /bin/sh -c "sops --version"

      - name: Login to External Registry üîë
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URI }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Push to External Registry üî∫
        id: push
        run: |
          docker pull ${{ env.IMAGE_TAG_LOCAL }}

          TAGS=${{ steps.prep.outputs.tags }}
          for TAG in ${TAGS//,/ }; do
            docker tag ${{ env.IMAGE_TAG_LOCAL }} ${TAG}
            docker push ${TAG}
          done

      - name: Image Digest üîñ
        run: echo ${{ steps.image_build.outputs.digest }}

  ######################
  # ploigos-tool-maven #
  ######################
  ploigos-tool-maven:
    needs:
    - ploigos-base-java-8

    runs-on: ubuntu-latest

    env:
      IMAGE_CONTEXT: ./ploigos-tool-maven
      IMAGE_FILE: Containerfile
      IMAGE_NAME: ploigos-tool-maven
      IMAGE_TAG_LOCAL: localhost:5000/${{ secrets.REGISTRY_REPOSITORY }}/ploigos-tool-maven:latest
      FROM_IMAGE_NAME: ploigos-base-java-8

    services:
      registry:
        image: registry:2
        ports:
        - 5000:5000

    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v2

      - name: Determine Image Version and Tags ‚öôÔ∏è
        id: prep
        run: |
          IMAGE_REPOSITORY=${{ secrets.REGISTRY_URI }}/${{ secrets.REGISTRY_REPOSITORY }}/${{ env.IMAGE_NAME }}

          VERSION=noop
          if [ "${{ github.event_name }}" = "schedule" ]; then
            VERSION=nightly
          elif [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
            if [ "${{ github.event.repository.default_branch }}" = "$VERSION" ]; then
              VERSION=edge
            fi
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION=pr-${{ github.event.number }}
          fi
          TAGS="${IMAGE_REPOSITORY}:${VERSION}"
          if [[ $VERSION =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            MINOR=${VERSION%.*}
            MAJOR=${MINOR%.*}
            TAGS="$TAGS,${IMAGE_REPOSITORY}:${MINOR},${IMAGE_REPOSITORY}:${MAJOR},${IMAGE_REPOSITORY}:latest"
          elif [ "${{ github.event_name }}" = "push" ]; then
            TAGS="$TAGS,${IMAGE_REPOSITORY}:sha-${GITHUB_SHA::8}"
          fi

          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')

      - name: Version üìå
        run: echo ${{ steps.prep.outputs.version }}

      - name: Image Tags üè∑
        run: echo ${{ steps.prep.outputs.tags }}

      - name: Set up QEMU üß∞
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx üß∞
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: network=host

      - name: Cache Docker layers üóÉ
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Image üõ†
        id: image_build
        uses: docker/build-push-action@v2
        env:
          IMAGE_BUILD_ARGS: FROM_IMAGE=${{ secrets.REGISTRY_URI }}/${{ secrets.REGISTRY_REPOSITORY }}/${{ env.FROM_IMAGE_NAME }}:${{ steps.prep.outputs.version }}
        with:
          context: ${{ env.IMAGE_CONTEXT }}
          file: ${{ env.IMAGE_CONTEXT }}/${{ env.IMAGE_FILE }}
          build-args: ${{ env.IMAGE_BUILD_ARGS }}
          push: true
          tags: ${{ env.IMAGE_TAG_LOCAL }}
          labels: |
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Test Image üß™
        run: |
          echo "Verify java installed"
          docker run -u 1001 --entrypoint='' ${{ env.IMAGE_TAG_LOCAL }} /bin/bash -c "java -version"
          echo "Verify maven installed"
          docker run -u 1001 --entrypoint='' ${{ env.IMAGE_TAG_LOCAL }} /bin/bash -c "mvn --version"
          echo "Verify can create file in ~/.m2"
          docker run -u 1001 --entrypoint='' ${{ env.IMAGE_TAG_LOCAL }} /bin/bash -c "mkdir -p ~/.m2; touch ~/.m2/test-settings.xml"

      - name: Login to External Registry üîë
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URI }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Push to External Registry üî∫
        id: push
        run: |
          docker pull ${{ env.IMAGE_TAG_LOCAL }}

          TAGS=${{ steps.prep.outputs.tags }}
          for TAG in ${TAGS//,/ }; do
            docker tag ${{ env.IMAGE_TAG_LOCAL }} ${TAG}
            docker push ${TAG}
          done

      - name: Image Digest üîñ
        run: echo ${{ steps.image_build.outputs.digest }}

  #######################
  # ploigos-tool-skopeo #
  #######################
  ploigos-tool-skopeo:
    needs:
    - ploigos-base

    runs-on: ubuntu-latest

    env:
      IMAGE_CONTEXT: ./ploigos-tool-skopeo
      IMAGE_FILE: Containerfile
      IMAGE_NAME: ploigos-tool-skopeo
      IMAGE_TAG_LOCAL: localhost:5000/${{ secrets.REGISTRY_REPOSITORY }}/ploigos-tool-skopeo:latest
      FROM_IMAGE_NAME: ploigos-base

    services:
      registry:
        image: registry:2
        ports:
        - 5000:5000

    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v2

      - name: Determine Image Version and Tags ‚öôÔ∏è
        id: prep
        run: |
          IMAGE_REPOSITORY=${{ secrets.REGISTRY_URI }}/${{ secrets.REGISTRY_REPOSITORY }}/${{ env.IMAGE_NAME }}

          VERSION=noop
          if [ "${{ github.event_name }}" = "schedule" ]; then
            VERSION=nightly
          elif [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
            if [ "${{ github.event.repository.default_branch }}" = "$VERSION" ]; then
              VERSION=edge
            fi
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION=pr-${{ github.event.number }}
          fi
          TAGS="${IMAGE_REPOSITORY}:${VERSION}"
          if [[ $VERSION =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            MINOR=${VERSION%.*}
            MAJOR=${MINOR%.*}
            TAGS="$TAGS,${IMAGE_REPOSITORY}:${MINOR},${IMAGE_REPOSITORY}:${MAJOR},${IMAGE_REPOSITORY}:latest"
          elif [ "${{ github.event_name }}" = "push" ]; then
            TAGS="$TAGS,${IMAGE_REPOSITORY}:sha-${GITHUB_SHA::8}"
          fi

          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')

      - name: Version üìå
        run: echo ${{ steps.prep.outputs.version }}

      - name: Image Tags üè∑
        run: echo ${{ steps.prep.outputs.tags }}

      - name: Set up QEMU üß∞
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx üß∞
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: network=host

      - name: Cache Docker layers üóÉ
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Image üõ†
        id: image_build
        uses: docker/build-push-action@v2
        env:
          IMAGE_BUILD_ARGS: FROM_IMAGE=${{ secrets.REGISTRY_URI }}/${{ secrets.REGISTRY_REPOSITORY }}/${{ env.FROM_IMAGE_NAME }}:${{ steps.prep.outputs.version }}
        with:
          context: ${{ env.IMAGE_CONTEXT }}
          file: ${{ env.IMAGE_CONTEXT }}/${{ env.IMAGE_FILE }}
          build-args: ${{ env.IMAGE_BUILD_ARGS }}
          push: true
          tags: ${{ env.IMAGE_TAG_LOCAL }}
          labels: |
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Test Image üß™
        run: |
          echo "Running: docker run ${{ env.IMAGE_TAG_LOCAL }} --version"
          docker run ${{ env.IMAGE_TAG_LOCAL }} --version

      - name: Login to External Registry üîë
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URI }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Push to External Registry üî∫
        id: push
        run: |
          docker pull ${{ env.IMAGE_TAG_LOCAL }}

          TAGS=${{ steps.prep.outputs.tags }}
          for TAG in ${TAGS//,/ }; do
            docker tag ${{ env.IMAGE_TAG_LOCAL }} ${TAG}
            docker push ${TAG}
          done

      - name: Image Digest üîñ
        run: echo ${{ steps.image_build.outputs.digest }}

  ######################
  # ploigos-tool-sonar #
  ######################
  ploigos-tool-sonar:
    needs:
    - ploigos-base

    runs-on: ubuntu-latest

    env:
      IMAGE_CONTEXT: ./ploigos-tool-sonar
      IMAGE_FILE: Containerfile
      IMAGE_NAME: ploigos-tool-sonar
      IMAGE_TAG_LOCAL: localhost:5000/${{ secrets.REGISTRY_REPOSITORY }}/ploigos-tool-sonar:latest
      FROM_IMAGE_NAME: ploigos-base

    services:
      registry:
        image: registry:2
        ports:
        - 5000:5000

    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v2

      - name: Determine Image Version and Tags ‚öôÔ∏è
        id: prep
        run: |
          IMAGE_REPOSITORY=${{ secrets.REGISTRY_URI }}/${{ secrets.REGISTRY_REPOSITORY }}/${{ env.IMAGE_NAME }}

          VERSION=noop
          if [ "${{ github.event_name }}" = "schedule" ]; then
            VERSION=nightly
          elif [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
            if [ "${{ github.event.repository.default_branch }}" = "$VERSION" ]; then
              VERSION=edge
            fi
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION=pr-${{ github.event.number }}
          fi
          TAGS="${IMAGE_REPOSITORY}:${VERSION}"
          if [[ $VERSION =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            MINOR=${VERSION%.*}
            MAJOR=${MINOR%.*}
            TAGS="$TAGS,${IMAGE_REPOSITORY}:${MINOR},${IMAGE_REPOSITORY}:${MAJOR},${IMAGE_REPOSITORY}:latest"
          elif [ "${{ github.event_name }}" = "push" ]; then
            TAGS="$TAGS,${IMAGE_REPOSITORY}:sha-${GITHUB_SHA::8}"
          fi

          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')

      - name: Version üìå
        run: echo ${{ steps.prep.outputs.version }}

      - name: Image Tags üè∑
        run: echo ${{ steps.prep.outputs.tags }}

      - name: Set up QEMU üß∞
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx üß∞
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: network=host

      - name: Cache Docker layers üóÉ
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Image üõ†
        id: image_build
        uses: docker/build-push-action@v2
        env:
          IMAGE_BUILD_ARGS: FROM_IMAGE=${{ secrets.REGISTRY_URI }}/${{ secrets.REGISTRY_REPOSITORY }}/${{ env.FROM_IMAGE_NAME }}:${{ steps.prep.outputs.version }}
        with:
          context: ${{ env.IMAGE_CONTEXT }}
          file: ${{ env.IMAGE_CONTEXT }}/${{ env.IMAGE_FILE }}
          build-args: ${{ env.IMAGE_BUILD_ARGS }}
          push: true
          tags: ${{ env.IMAGE_TAG_LOCAL }}
          labels: |
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Test Image üß™
        run: |
          echo "Running: docker run ${{ env.IMAGE_TAG_LOCAL }} sonar-scanner --version"
          docker run -u 1001 ${{ env.IMAGE_TAG_LOCAL }} sonar-scanner --version

      - name: Login to External Registry üîë
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URI }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Push to External Registry üî∫
        id: push
        run: |
          docker pull ${{ env.IMAGE_TAG_LOCAL }}

          TAGS=${{ steps.prep.outputs.tags }}
          for TAG in ${TAGS//,/ }; do
            docker tag ${{ env.IMAGE_TAG_LOCAL }} ${TAG}
            docker push ${TAG}
          done

      - name: Image Digest üîñ
        run: echo ${{ steps.image_build.outputs.digest }}
